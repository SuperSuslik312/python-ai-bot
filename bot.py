from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.handler import CancelHandler, current_handler

from ai import update, start_conversation
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.middlewares import BaseMiddleware
from asyncio import sleep
from postgresql import *

from keyboards import ikb_admin, ikb_user, ikb_cancel_admin, ikb_cancel_user, ikb_confirm_his, ikb_confirm_ins


# Simple decorator for admin commands
def set_key(key: str = None):
    def decorator(func):
        setattr(func, 'key', key)
        return func

    return decorator


# Start connection with database
async def on_startup(_):
    await start_db()


bot = Bot(Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# Add user to database if he is not there
class AddUserToDB(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        await create(message.from_user.id)


# Check if the user in whitelist or not
class Whitelist(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        is_whitelisted = await read_whitelist(message.from_user.id)
        if not is_whitelisted:
            await message.answer_chat_action('typing')
            await sleep(1.66)
            await message.answer(
                "I'm sorry, but you're not on the whitelist.\n\nIf yout want to chat with me, you can contact my "
                "developer @SuperSuslik312 or deploy me yourself, source code is available [here]"
                "(https://github.com/SuperSuslik312/python-ai-bot)",
                parse_mode=types.ParseMode.MARKDOWN)
            await message.answer_chat_action('choose_sticker')
            await sleep(1.33)
            await message.answer_sticker("CAACAgIAAxkBAAEIvA1kSHmXeLZRAu03uPm1k8TZ54xTbAACWUAAAuCjggc35LUFXNY5gC8E")
            raise CancelHandler()


# Check if the user is admin or not
class Adminlist(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        handler = current_handler.get()
        if handler:
            key = getattr(handler, 'key', None)
            if key == 'admin':
                is_admin = await read_admin(message.from_user.id)
                if not is_admin:
                    await message.answer_chat_action('typing')
                    await sleep(1.66)
                    await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')
                    raise CancelHandler()


# Temp storage
class Profile(StatesGroup):
    is_admin = State()
    no_admin = State()
    is_whitelisted = State()
    no_whitelisted = State()
    instructions = State()


# Start the conversation with bot
@dp.message_handler(commands='start')
async def start_bot(message: types.Message):
    instructions = await read_instructions(message.from_user.id)
    await message.answer_chat_action('typing')
    response = await start_conversation(instructions)
    await message.answer(response)


@dp.message_handler(commands='menu')
async def user_menu(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω—è",
                         reply_markup=ikb_user)


# Admin panel
@dp.message_handler(commands='admin')
@set_key('admin')
async def admin_panel(message: types.Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω',
                         reply_markup=ikb_admin)


@dp.callback_query_handler(state='*')
async def admin_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'add_whitelist':
        await callback.message.edit_text(text="–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.",
                                         reply_markup=ikb_cancel_admin)
        await Profile.is_whitelisted.set()
    elif callback.data == 'del_whitelist':
        await callback.message.edit_text(text="–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.",
                                         reply_markup=ikb_cancel_admin)
        await Profile.no_whitelisted.set()
    elif callback.data == 'add_admin':
        await callback.message.edit_text(text="–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.",
                                         reply_markup=ikb_cancel_admin)
        await Profile.is_admin.set()
    elif callback.data == 'del_admin':
        await callback.message.edit_text(text="–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.",
                                         reply_markup=ikb_cancel_admin)
        await Profile.no_admin.set()
    elif callback.data == 'cancel_admin':
        await state.finish()
        await callback.message.edit_text(text="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ",
                                         reply_markup=ikb_admin)
    elif callback.data == 'clear':
        await callback.message.edit_text(text="–¢—ã —É–≤–µ—Ä–µ–Ω? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –Ω–∞–¥–æ, —è –∂–µ –≤—Å—ë –∑–∞–±—É–¥—Éüò≠",
                                         reply_markup=ikb_confirm_his)
    elif callback.data == 'confirm_his':
        await clean_history(callback.from_user.id)
        await callback.message.edit_text(text="–¢—ã —Å—Ç—ë—Ä –º–Ω–µ –ø–∞–º—è—Ç—å, –∑–∞ —á—Ç–æ —Ç—ã —Ç–∞–∫ —Å–æ –º–Ω–æ–π?üò¢",
                                         reply_markup=ikb_cancel_user)
    elif callback.data == 'set_prompt':
        await callback.message.edit_text(text='–ù–∞–ø–∏—à–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å!\n\n–ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ '
                                              '—Ö–æ—á–µ—à—å —á—Ç–æ–±—ã –º–µ–Ω—è –∑–≤–∞–ª–∏ –ö—É—Ä—É–º–∏ –Ω–∞–ø–∏—à–∏ "–¢–µ–±—è –∑–æ–≤—É—Ç –ö—É—Ä—É–º–∏" –∏–ª–∏ "–¢–≤–æ—ë '
                                              '–∏–º—è - –ö—É—Ä—É–º–∏" –∏ —Ç.–¥.\n\n–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, '
                                              '–≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!\n\n'
                                              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "–ù–∞–∑–∞–¥"',
                                         reply_markup=ikb_cancel_user)
        await Profile.instructions.set()
    elif callback.data == 'reset_prompt':
        await callback.message.edit_text(text="–¢—ã —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ—ë–º —Ä–µ—à–µ–Ω–∏–∏?",
                                         reply_markup=ikb_confirm_ins)
    elif callback.data == 'confirm_ins':
        await reset_instructions(callback.from_user.id)
        await callback.message.edit_text(text="–ú–æ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ, –Ω–µ –∑–Ω–∞—é, —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–ª–∞–∫–∞—Ç—å...",
                                         reply_markup=ikb_cancel_user)
    elif callback.data == 'cancel_user' or callback.data == 'no_confirm_his' or callback.data == 'no_confirm_ins':
        await state.finish()
        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω—è",
                                         reply_markup=ikb_user)
    elif callback.data == 'cancel_panel':
        await callback.message.delete()


@dp.message_handler(state=Profile.is_whitelisted)
async def whitelistadd_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['is_whitelisted'] = True
    await edit_whitelist(state, user_id=message.text)
    await message.answer_chat_action('typing')
    await sleep(1.66)
    await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!')
    await state.finish()


@dp.message_handler(state=Profile.no_whitelisted)
async def whitelistdel_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['is_whitelisted'] = False
    await edit_whitelist(state, user_id=message.text)
    await message.answer_chat_action('typing')
    await sleep(1.66)
    await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞!')
    await state.finish()


@dp.message_handler(state=Profile.is_admin)
async def adminadd_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['is_admin'] = True
    await edit_admin(state, user_id=message.text)
    await message.answer_chat_action('typing')
    await sleep(1.66)
    await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞!')
    await state.finish()


@dp.message_handler(state=Profile.no_admin)
async def admindel_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['is_admin'] = False
    await edit_admin(state, user_id=message.text)
    await message.answer_chat_action('typing')
    await sleep(1.66)
    await message.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞!')
    await state.finish()


@dp.message_handler(state=Profile.instructions)
async def setprompt_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['instructions'] = message.text
    await edit_instructions(state, message.from_user.id)
    await message.answer_chat_action('typing')
    await sleep(1.66)
    await message.answer('–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–ª –º–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Å–ø–∞—Å–∏–±–æ!')
    await message.answer_chat_action('choose_sticker')
    await sleep(1.33)
    await message.answer_sticker('CAACAgIAAxkBAAEIyFhkTaTnTzPFtQeYx4WaRUiYJglBnwACyj8AAuCjggcUTxrEwRdNXy8E')
    await state.finish()


# Get the user ids from database that in whitelist !!! Not actually completed
@dp.message_handler(commands='whitelistget')
@set_key('admin')
async def whitelistget(message: types.Message):
    user_ids = await get_whitelist()
    await message.answer_chat_action('typing')
    await sleep(1.66)
    await message.answer(user_ids)


# Chatting with GPT-3.5
@dp.message_handler()
async def main(message: types.Message):
    try:
        user_id = message.from_user.id
        await message.answer_chat_action('typing')
        new_question = message.text
        instructions = await read_instructions(user_id)
        response = await update(instructions, user_id, new_question)
        await message.answer(response, parse_mode=types.ParseMode.MARKDOWN)
    except Exception as e:
        print(e)
        await message.answer_chat_action('typing')
        await sleep(1.66)
        await message.answer("–ü—Ä–æ—Å—Ç–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.")
        await message.answer_chat_action('choose_sticker')
        await sleep(1.33)
        await message.answer_sticker("CAACAgIAAxkBAAEIvA9kSHs-b_bMbTJRFxkzFEFx8X5M5AACzz8AAuCjggd2g0I1aviuMS8E")
        await message.answer_chat_action('typing')
        await sleep(1.66)
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –æ—á–∏—Å—Ç–∏—Ç—å –º–Ω–µ –ø–∞–º—è—Ç—å, –∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Å–≤—è–∂–∏—Å—å —Å @SuperSuslik312 –∏ "
                             "–ø–µ—Ä–µ—à–ª–∏ –µ–º—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await message.answer(e)


# Bot polling
if __name__ == '__main__':
    dp.middleware.setup(Whitelist())
    dp.middleware.setup(Adminlist())
    dp.middleware.setup(AddUserToDB())
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
