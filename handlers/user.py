import base64
import io
from asyncio import sleep

from aiogram import (
    types,
    Router,
    F,
    Bot
)
from aiogram.enums import ParseMode
from aiogram.filters import (
    Command,
    CommandStart
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import (
    StatesGroup,
    State
)
from aiogram.types import ErrorEvent
from aiogram.utils.chat_action import (
    ChatActionSender,
    logger
)

from ai import *
from middlewares import (
    AddUserToDB,
    Whitelist
)
from keyboards import *
from postgresql import (
    clean_history,
    reset_instructions,
    edit_instructions,
    read_instructions
)

bot = Bot(Config.BOT_TOKEN)
router = Router()
router.message.middleware(AddUserToDB())
router.message.middleware(Whitelist())
router.callback_query.middleware(Whitelist())


class Profile(StatesGroup):
    instructions = State()


@router.message(CommandStart())
async def start_bot(message: types.Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        instructions = await read_instructions(message.from_user.id)
        response = await start_conversation(instructions)
        await message.answer(response)


@router.message(Command('menu'))
async def user_menu(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω—è", reply_markup=user_keyboard())


@router.callback_query(F.data.startswith("user_"))
async def user_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    if action == "clear":
        await callback.message.edit_text(text="–¢—ã —É–≤–µ—Ä–µ–Ω? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –Ω–∞–¥–æ, —è –∂–µ –≤—Å—ë –∑–∞–±—É–¥—Éüò≠",
                                         reply_markup=user_keyboard_foolproof_his())
    elif action == 'confirm-his':
        await clean_history(callback.from_user.id)
        await callback.message.edit_text(text="–¢—ã —Å—Ç—ë—Ä –º–Ω–µ –ø–∞–º—è—Ç—å, –∑–∞ —á—Ç–æ —Ç—ã —Ç–∞–∫ —Å–æ –º–Ω–æ–π?üò¢",
                                         reply_markup=user_keyboard_cancel())
    elif action == 'set-prompt':
        await state.set_state(Profile.instructions)
        await callback.message.edit_text(text='–ù–∞–ø–∏—à–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å!\n\n–ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ '
                                              '—Ö–æ—á–µ—à—å —á—Ç–æ–±—ã –º–µ–Ω—è –∑–≤–∞–ª–∏ –ö—É—Ä—É–º–∏ –Ω–∞–ø–∏—à–∏ "–¢–µ–±—è –∑–æ–≤—É—Ç –ö—É—Ä—É–º–∏" –∏–ª–∏ "–¢–≤–æ—ë '
                                              '–∏–º—è - –ö—É—Ä—É–º–∏" –∏ —Ç.–¥.\n\n–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, '
                                              '–≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!\n\n'
                                              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "–ù–∞–∑–∞–¥"',
                                         reply_markup=user_keyboard_cancel())
    elif action == 'reset-prompt':
        await callback.message.edit_text(text="–¢—ã —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ—ë–º —Ä–µ—à–µ–Ω–∏–∏?",
                                         reply_markup=user_keyboard_foolproof_ins())
    elif action == 'confirm-ins':
        await reset_instructions(callback.from_user.id)
        await callback.message.edit_text(
            text="–ú–æ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ, –Ω–µ –∑–Ω–∞—é, —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–ª–∞–∫–∞—Ç—å...",
            reply_markup=user_keyboard_cancel())
    elif action == 'cancel' or action == 'no-confirm-his' or action == 'no-confirm-ins':
        await state.clear()
        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω—è",
                                         reply_markup=user_keyboard())
    elif action == 'cancel-panel':
        await callback.message.delete()


@router.message(Profile.instructions)
async def set_prompt(message: types.Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await state.update_data(instructions=message.text)
        await edit_instructions(state, message.from_user.id)
        await sleep(1.66)
        await message.answer('–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–ª –º–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Å–ø–∞—Å–∏–±–æ!')
        await sleep(1.33)
        await message.answer_sticker('CAACAgIAAxkBAAEIyFhkTaTnTzPFtQeYx4WaRUiYJglBnwACyj8AAuCjggcUTxrEwRdNXy8E')
        await state.clear()


@router.message(F.text)
async def main_handler(message: types.Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_id = message.from_user.id
        new_question = message.caption if message.caption else message.text
        instructions = await read_instructions(user_id)
        response = await update(instructions, user_id, new_question, None)
        await message.answer(response, parse_mode=ParseMode.MARKDOWN)


@router.message(F.photo)
async def photo_handler(message: types.Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_id = message.from_user.id
        new_question = message.caption
        instructions = await read_instructions(user_id)
        photo_id = message.photo[-1].file_id
        photo = await bot.get_file(photo_id)
        photo_path = photo.file_path
        result: io.BytesIO = await bot.download_file(photo_path)
        photo_base64 = base64.b64encode(result.getvalue()).decode('utf-8')
        photo_uri = f"data:image/jpeg;base64,{photo_base64}"
        response = await update(instructions, user_id, new_question, photo_uri)
        result.close()
        await message.answer(response, parse_mode=ParseMode.MARKDOWN)


@router.error(F.update.message.as_("message"))
async def error_handler(event: ErrorEvent, message: types.Message):
    logger.critical("Critical error caused by %s", event.exception, exc_info=True)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id, interval=1):
        await sleep(1.66)
        await message.answer("–ü—Ä–æ—Å—Ç–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.")
        await sleep(1.33)
        await message.answer_sticker("CAACAgIAAxkBAAEIvA9kSHs-b_bMbTJRFxkzFEFx8X5M5AACzz8AAuCjggd2g0I1aviuMS8E")
        await sleep(1.66)
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –æ—á–∏—Å—Ç–∏—Ç—å –º–Ω–µ –ø–∞–º—è—Ç—å, –∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Å–≤—è–∂–∏—Å—å —Å @SuperSuslik312 –∏ "
                             "–ø–µ—Ä–µ—à–ª–∏ –µ–º—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await message.answer(f"Critical error caused by\n\n{event.exception}")
